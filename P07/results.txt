====================
HOMEWORK P07 RESULTS
====================

Fall 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Boggle command line arguments ([#boards] and if not default [boardSize])did you use to achieve a 30 to 45 second runtime? Note: We're only interested in the "real" seconds for this question.
Answer: I used "time java Boggle 140" to achieve a runtime of 39.406s.





QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** With bash, you can run all of these with a single command if you like, replacing "90" with whatever Boggle command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 90 - $i ; done

Answer:

$ for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 140 - $i ; done

1 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m39.976s
user    0m0.000s
sys     0m0.015s

2 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m23.903s
user    0m0.000s
sys     0m0.000s

3 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m16.750s
user    0m0.000s
sys     0m0.000s

4 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m13.435s
user    0m0.000s
sys     0m0.000s

5 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m12.928s
user    0m0.000s
sys     0m0.000s

6 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m12.794s
user    0m0.000s
sys     0m0.000s

7 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m13.326s
user    0m0.000s
sys     0m0.000s

8 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m14.237s
user    0m0.000s
sys     0m0.016s

9 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m13.294s
user    0m0.000s
sys     0m0.000s

10 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m15.002s
user    0m0.000s
sys     0m0.015s

11 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m14.828s
user    0m0.000s
sys     0m0.000s

12 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m14.439s
user    0m0.000s
sys     0m0.000s

13 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m16.311s
user    0m0.000s
sys     0m0.000s

14 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m14.508s
user    0m0.015s
sys     0m0.000s

15 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m14.822s
user    0m0.000s
sys     0m0.000s

16 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m16.590s
user    0m0.000s
sys     0m0.000s




QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?
Answer: Yes, adding more threads makes the program faster at first, but after about 5-6 threads, it slows down a bit. This happens because the CPU has only a certain number of cores. Once all the cores are busy, adding more threads creates extra work for the system to manage them, which reduces the speed.


QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Yes, from 0.285 seconds to 1.667 seconds for this data set

Answer: Yes, adding more threads increases the system load. This is because the system has to manage more threads, which requires more resources like CPU time for switching between threads. As the number of threads grows, the system needs to handle more tasks simultaneously, increasing the load and slowing down the program slightly due to this extra overhead.






BONUS
=====

QUESTION 5: Time your version of Boggle as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?
Answer: Using dynamic threading with a shared counter to assign boards resulted in slightly faster performance compared to static allocation. This approach keeps threads busy by requesting a new board immediately after completing the current one, leading to better workload distribution and reduced idle time. The performance improvement is marginal when thread count aligns well with CPU cores, as managing extra threads adds some overhead.

YOUR Timing:

1 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m39.654s
user    0m0.000s
sys     0m0.014s

5 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m12.329s
user    0m0.000s
sys     0m0.000s

16 Threads

Found 51590 solutions
Hash is 0xAE4B38F4

real    0m14.750s
user    0m0.000s
sys     0m0.000s